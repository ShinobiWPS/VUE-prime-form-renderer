// vite.config.ts
import vue from "file:///home/shinobi/dev-wsl/VUE-prime-form-renderer/node_modules/.pnpm/@vitejs+plugin-vue@5.0.0_vite@5.0.10_vue@3.4.0/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { fileURLToPath, URL } from "node:url";
import AutoImport from "file:///home/shinobi/dev-wsl/VUE-prime-form-renderer/node_modules/.pnpm/unplugin-auto-import@0.17.3/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///home/shinobi/dev-wsl/VUE-prime-form-renderer/node_modules/.pnpm/unplugin-vue-components@0.26.0_vue@3.4.0/node_modules/unplugin-vue-components/dist/vite.js";
import { defineConfig } from "file:///home/shinobi/dev-wsl/VUE-prime-form-renderer/node_modules/.pnpm/vite@5.0.10_@types+node@20.10.5/node_modules/vite/dist/node/index.js";

// package.json
var version = "1.0.0";

// vite.config.ts
var __vite_injected_original_import_meta_url = "file:///home/shinobi/dev-wsl/VUE-prime-form-renderer/vite.config.ts";
process.env.VITE_APP_VERSION = version;
if (process.env.NODE_ENV === "production") {
  process.env.VITE_APP_BUILD_EPOCH = (/* @__PURE__ */ new Date()).getTime().toString();
}
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    AutoImport({
      imports: [
        "vue",
        "vue-router",
        "@vueuse/head",
        "pinia",
        {
          "@/store": ["useStore"],
          "@vueuse/head": ["useHead"]
        }
      ],
      dts: "auto-imports.d.ts",
      vueTemplate: true,
      eslintrc: {
        enabled: true
      }
    }),
    Components({
      dts: "components.d.ts"
    })
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL2hvbWUvc2hpbm9iaS9kZXYtd3NsL1ZVRS1wcmltZS1mb3JtLXJlbmRlcmVyXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9zaGlub2JpL2Rldi13c2wvVlVFLXByaW1lLWZvcm0tcmVuZGVyZXIvdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL2hvbWUvc2hpbm9iaS9kZXYtd3NsL1ZVRS1wcmltZS1mb3JtLXJlbmRlcmVyL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnXG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoLCBVUkwgfSBmcm9tICdub2RlOnVybCdcbmltcG9ydCBBdXRvSW1wb3J0IGZyb20gJ3VucGx1Z2luLWF1dG8taW1wb3J0L3ZpdGUnXG5pbXBvcnQgQ29tcG9uZW50cyBmcm9tICd1bnBsdWdpbi12dWUtY29tcG9uZW50cy92aXRlJ1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcbmltcG9ydCB7IHZlcnNpb24gYXMgcGtnVmVyc2lvbiB9IGZyb20gJy4vcGFja2FnZS5qc29uJ1xuXG5wcm9jZXNzLmVudi5WSVRFX0FQUF9WRVJTSU9OID0gcGtnVmVyc2lvblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuVklURV9BUFBfQlVJTERfRVBPQ0ggPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFtcbiAgICB2dWUoKSxcbiAgICBBdXRvSW1wb3J0KHtcbiAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgJ3Z1ZScsXG4gICAgICAgICd2dWUtcm91dGVyJyxcbiAgICAgICAgJ0B2dWV1c2UvaGVhZCcsXG4gICAgICAgICdwaW5pYScsXG4gICAgICAgIHtcbiAgICAgICAgICAnQC9zdG9yZSc6IFsndXNlU3RvcmUnXSxcbiAgICAgICAgICAnQHZ1ZXVzZS9oZWFkJzogWyd1c2VIZWFkJ10sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgZHRzOiAnYXV0by1pbXBvcnRzLmQudHMnLFxuICAgICAgdnVlVGVtcGxhdGU6IHRydWUsXG4gICAgICBlc2xpbnRyYzoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KSxcbiAgICBDb21wb25lbnRzKHtcbiAgICAgIGR0czogJ2NvbXBvbmVudHMuZC50cycsXG4gICAgfSksXG4gIF0sXG4gIHJlc29sdmU6IHtcbiAgICBhbGlhczoge1xuICAgICAgJ0AnOiBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4vc3JjJywgaW1wb3J0Lm1ldGEudXJsKSksXG4gICAgfSxcbiAgfSxcbn0pXG4iLCAie1xuICBcIm5hbWVcIjogXCJ2dWUtcHJpbWUtZm9ybS1yZW5kZXJlclwiLFxuICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcImNyb3NzLWVudiBERUJVRz0wIHZpdGVcIixcbiAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgYnVpbGQgJiYgdml0ZSBwcmV2aWV3XCIsXG4gICAgXCJzdGFydFwiOiBcInBucG0gZGV2ICYgd2FpdC1vbiB0Y3A6MzAwMCAtdlwiLFxuICAgIFwidGVzdFwiOiBcInZpdGVzdFwiLFxuICAgIFwiY292ZXJhZ2VcIjogXCJ2aXRlc3QgcnVuIC0tY292ZXJhZ2VcIixcbiAgICBcInRlc3QtZTJlXCI6IFwicGxheXdyaWdodCB0ZXN0IC0taGVhZGVkXCIsXG4gICAgXCJ0ZXN0OmNpXCI6IFwidml0ZXN0IHJ1biAtLWNvdmVyYWdlXCIsXG4gICAgXCJ0ZXN0OmNpLWUyZVwiOiBcInBsYXl3cmlnaHQgdGVzdFwiLFxuICAgIFwidHlwZS1jaGVja1wiOiBcInZ1ZS10c2MgLS1idWlsZCAtLWZvcmNlXCIsXG4gICAgXCJwcmVwYXJlXCI6IFwiaHVza3kgaW5zdGFsbFwiXG4gIH0sXG4gIFwibGludC1zdGFnZWRcIjoge1xuICAgIFwiKi57anMsdHMsdnVlfVwiOiBbXG4gICAgICBcImVzbGludCAtLXF1aWV0IC0tZml4XCJcbiAgICBdLFxuICAgIFwiKi57dnVlLGpzb24sanMsdHMsanN4LHRzeCxodG1sfVwiOiBbXG4gICAgICBcInByZXR0aWVyIC0td3JpdGUgLS1pZ25vcmUtdW5rbm93blwiXG4gICAgXVxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdnVldXNlL2hlYWRcIjogXCIyLjAuMFwiLFxuICAgIFwicGluaWFcIjogXCIyLjEuN1wiLFxuICAgIFwidnVlXCI6IFwiMy40LjBcIixcbiAgICBcInZ1ZS1yb3V0ZXJcIjogXCI0LjIuNVwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBpY29uaWZ5L2pzb25cIjogXCIyLjIuMTYzXCIsXG4gICAgXCJAaWNvbmlmeS90eXBlc1wiOiBcIjIuMC4wXCIsXG4gICAgXCJAcGluaWEvdGVzdGluZ1wiOiBcIjAuMS4zXCIsXG4gICAgXCJAcGxheXdyaWdodC90ZXN0XCI6IFwiMS40MC4xXCIsXG4gICAgXCJAcnVzaHN0YWNrL2VzbGludC1wYXRjaFwiOiBcIjEuNi4xXCIsXG4gICAgXCJAdHNjb25maWcvbm9kZTIwXCI6IFwiMjAuMS4yXCIsXG4gICAgXCJAdHlwZXMvanNkb21cIjogXCIyMS4xLjZcIixcbiAgICBcIkB0eXBlcy9saW50LXN0YWdlZFwiOiBcIl4xMy4zLjBcIixcbiAgICBcIkB0eXBlcy9sb2Rhc2gtZXNcIjogXCI0LjE3LjEyXCIsXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIjIwLjEwLjVcIixcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiNi4xNi4wXCIsXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiNi4xNi4wXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi12dWVcIjogXCI1LjAuMFwiLFxuICAgIFwiQHZpdGVzdC9jb3ZlcmFnZS12OFwiOiBcIjEuMS4wXCIsXG4gICAgXCJAdnVlL2VzbGludC1jb25maWctcHJldHRpZXJcIjogXCI5LjAuMFwiLFxuICAgIFwiQHZ1ZS9lc2xpbnQtY29uZmlnLXR5cGVzY3JpcHRcIjogXCIxMi4wLjBcIixcbiAgICBcIkB2dWUvdGVzdC11dGlsc1wiOiBcIjIuNC4zXCIsXG4gICAgXCJAdnVlL3RzY29uZmlnXCI6IFwiMC41LjFcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIjEwLjQuMTZcIixcbiAgICBcImNyb3NzLWVudlwiOiBcIjcuMC4zXCIsXG4gICAgXCJjc3NuYW5vXCI6IFwiNi4wLjJcIixcbiAgICBcImVzbGludFwiOiBcIjguNTYuMFwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy1wcmV0dGllclwiOiBcIjkuMS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLWltcG9ydFwiOiBcIjIuMjkuMVwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1ub2RlXCI6IFwiMTEuMS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXByb21pc2VcIjogXCI2LjEuMVwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zZWN1cml0eVwiOiBcIjIuMS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXZ1ZVwiOiBcIjkuMTkuMlwiLFxuICAgIFwiaHVza3lcIjogXCI4LjAuM1wiLFxuICAgIFwianNkb21cIjogXCIyMy4wLjFcIixcbiAgICBcImxpbnQtc3RhZ2VkXCI6IFwiMTUuMi4wXCIsXG4gICAgXCJsb2Rhc2gtZXNcIjogXCI0LjE3LjIxXCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiOC40LjMyXCIsXG4gICAgXCJwb3N0Y3NzLWltcG9ydFwiOiBcIjE1LjEuMFwiLFxuICAgIFwicG9zdGNzcy1uZXN0aW5nXCI6IFwiMTIuMC4yXCIsXG4gICAgXCJwcmV0dGllclwiOiBcIjMuMS4xXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiNS4zLjNcIixcbiAgICBcInVucGx1Z2luLWF1dG8taW1wb3J0XCI6IFwiMC4xNy4zXCIsXG4gICAgXCJ1bnBsdWdpbi12dWUtY29tcG9uZW50c1wiOiBcIjAuMjYuMFwiLFxuICAgIFwidml0ZVwiOiBcIjUuMC4xMFwiLFxuICAgIFwidml0ZXN0XCI6IFwiMS4xLjBcIixcbiAgICBcInZ1ZS10c2NcIjogXCIxLjguMjdcIixcbiAgICBcIndhaXQtb25cIjogXCI3LjIuMFwiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeVQsT0FBTyxTQUFTO0FBQ3pVLFNBQVMsZUFBZSxXQUFXO0FBQ25DLE9BQU8sZ0JBQWdCO0FBQ3ZCLE9BQU8sZ0JBQWdCO0FBQ3ZCLFNBQVMsb0JBQW9COzs7QUNGM0IsY0FBVzs7O0FERnFMLElBQU0sMkNBQTJDO0FBT25QLFFBQVEsSUFBSSxtQkFBbUI7QUFDL0IsSUFBSSxRQUFRLElBQUksYUFBYSxjQUFjO0FBQ3pDLFVBQVEsSUFBSSx3QkFBdUIsb0JBQUksS0FBSyxHQUFFLFFBQVEsRUFBRSxTQUFTO0FBQ25FO0FBRUEsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUztBQUFBLElBQ1AsSUFBSTtBQUFBLElBQ0osV0FBVztBQUFBLE1BQ1QsU0FBUztBQUFBLFFBQ1A7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsVUFDRSxXQUFXLENBQUMsVUFBVTtBQUFBLFVBQ3RCLGdCQUFnQixDQUFDLFNBQVM7QUFBQSxRQUM1QjtBQUFBLE1BQ0Y7QUFBQSxNQUNBLEtBQUs7QUFBQSxNQUNMLGFBQWE7QUFBQSxNQUNiLFVBQVU7QUFBQSxRQUNSLFNBQVM7QUFBQSxNQUNYO0FBQUEsSUFDRixDQUFDO0FBQUEsSUFDRCxXQUFXO0FBQUEsTUFDVCxLQUFLO0FBQUEsSUFDUCxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1AsT0FBTztBQUFBLE1BQ0wsS0FBSyxjQUFjLElBQUksSUFBSSxTQUFTLHdDQUFlLENBQUM7QUFBQSxJQUN0RDtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
